secrets:
  github_token:
    environment: "OBS_GLX_TOKEN"

services:
  db:
    image: ${POSTGRES_IMAGE:-postgres:16-alpine}
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_HOST_DB}
    volumes:
      - postgres-db:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_HOST_DB}" ]
      interval: 30s
      timeout: 10s
      retries: 10
    restart: unless-stopped
    networks:
      - backend

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  obs-glx-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      secrets:
        - github_token
    ports:
      - "${OBS_GLX_HOST_BIND_IP}:${OBS_GLX_HOST_PORT}:8000"
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - OBS_GLX_USE_SQLITE=false
      - POSTGRES_DB=${POSTGRES_HOST_DB}
    healthcheck:
      test: [ "CMD", "python", "-c", "import sys, urllib.request; sys.exit(0) if urllib.request.urlopen('http://localhost:8000/health').getcode() == 200 else sys.exit(1)" ]
      interval: 30s
      timeout: 10s
      start_period: 60s
      retries: 10
    restart: unless-stopped
    networks:
      - backend

  obs-glx-worker:
    build:
      context: .
      dockerfile: worker/obs_glx_worker/Dockerfile
      target: production
      secrets:
        - github_token
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - OBS_GLX_USE_SQLITE=false
      - POSTGRES_DB=${POSTGRES_HOST_DB}
    volumes:
      - /tmp/obsidian-workflows:/tmp/obsidian-workflows
    networks:
      - backend

volumes:
  postgres-db:
    driver: local
    name: ${OBS_GLX_PROJECT_NAME}-postgres-db-prod
    external: false

networks:
  backend:
    driver: bridge
