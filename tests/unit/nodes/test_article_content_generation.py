"""Unit tests for ArticleContentGenerationAgent."""

from unittest.mock import MagicMock

import pytest

from src.api.nodes.article_content_generation import ArticleContentGenerationAgent
from src.state import AgentResult, FileAction


@pytest.fixture
def mock_llm():
    """Create a mock LLM instance."""
    llm = MagicMock()
    mock_response = MagicMock()
    mock_response.content = """---
title: Test Article
category: Test
created: 2025-01-01
---

# Test Article

This is a test article generated by the LLM.

## Overview

Content here.
"""
    llm.invoke.return_value = mock_response
    return llm


@pytest.fixture
def agent(mock_llm):
    """Create ArticleContentGenerationAgent instance."""
    return ArticleContentGenerationAgent(mock_llm)


@pytest.fixture
def vault_path(tmp_path):
    """Create a temporary vault directory."""
    vault = tmp_path / "vault"
    vault.mkdir()
    return vault


def test_validate_input_valid(agent):
    """Test that validate_input accepts valid context."""
    context = {"article_proposals": [{"title": "Test"}]}
    assert agent.validate_input(context) is True


def test_validate_input_missing_proposals(agent):
    """Test that validate_input rejects missing article_proposals."""
    context = {}
    assert agent.validate_input(context) is False


def test_validate_input_invalid_proposals_type(agent):
    """Test that validate_input rejects non-list proposals."""
    context = {"article_proposals": "not a list"}
    assert agent.validate_input(context) is False


def test_execute_with_proposals(agent, vault_path):
    """Test that execute generates article content from proposals."""
    proposals = [
        {
            "title": "Introduction to Python",
            "category": "Programming",
            "filename": "programming/intro-python.md",
            "description": "A comprehensive guide to Python basics",
        },
        {
            "title": "Data Structures",
            "category": "Computer Science",
            "filename": "cs/data-structures.md",
            "description": "Understanding fundamental data structures",
        },
    ]

    context = {"article_proposals": proposals, "vault_summary": {}}

    result = agent.execute(context)

    assert isinstance(result, AgentResult)
    assert result.success is True
    assert len(result.changes) == 2
    assert result.changes[0].action == FileAction.CREATE
    assert (
        result.changes[0].path
        == "drafts/obs-graphs/create-new-article/programming/intro-python.md"
    )
    assert "---" in result.changes[0].content
    assert result.metadata["articles_created"] == 2


def test_execute_with_no_proposals(agent, vault_path):
    """Test that execute handles empty proposals list."""
    context = {"article_proposals": [], "vault_summary": {}}

    result = agent.execute(context)

    assert isinstance(result, AgentResult)
    assert result.success is True
    assert result.changes == []
    assert result.metadata["articles_created"] == 0


def test_execute_with_llm_error(agent, vault_path, mock_llm):
    """Test that execute handles LLM errors gracefully with fallback content."""
    mock_llm.invoke.side_effect = Exception("LLM connection failed")

    proposals = [
        {
            "title": "Test Article",
            "category": "Test",
            "filename": "test.md",
            "description": "Test description",
        }
    ]

    context = {"article_proposals": proposals, "vault_summary": {}}

    result = agent.execute(context)

    assert isinstance(result, AgentResult)
    assert result.success is True
    assert len(result.changes) == 1
    # Fallback content should be used
    assert "[Content to be expanded]" in result.changes[0].content


def test_execute_with_invalid_context(agent, vault_path):
    """Test that execute raises error with invalid context."""
    context = {}

    with pytest.raises(ValueError, match="article_proposals"):
        agent.execute(context)


def test_generate_article_content_adds_frontmatter(agent, vault_path, mock_llm):
    """Test that content without frontmatter gets frontmatter added."""
    mock_response = MagicMock()
    mock_response.content = "# Article Title\n\nContent without frontmatter"
    mock_llm.invoke.return_value = mock_response

    proposals = [
        {
            "title": "Test",
            "category": "Test",
            "filename": "test.md",
            "description": "Test",
        }
    ]

    context = {"article_proposals": proposals, "vault_summary": {}}

    result = agent.execute(context)

    assert result.success is True
    assert result.changes[0].content.startswith("---")
    assert "title: Test" in result.changes[0].content
