"""Agent for committing workflow changes to the branch."""

from src.obs_graphs.protocols import NodeProtocol, VaultServiceProtocol
from src.obs_graphs.state import AgentResult, FileChange


class CommitChangesAgent(NodeProtocol):
    """
    Agent responsible for committing accumulated changes to the branch.

    This agent:
    - Generates a meaningful commit message from workflow results
    - Commits all changes atomically using bulk API operations
    """

    def __init__(self, vault_service: VaultServiceProtocol):
        """Initialize the commit changes agent."""
        self.vault_service = vault_service

    def validate_input(self, context: dict) -> bool:
        """
        Validate that the context contains required information.

        Args:
            context: Must contain 'strategy', 'accumulated_changes', and 'node_results'

        Returns:
            True if context is valid, False otherwise
        """
        required_keys = ["strategy", "accumulated_changes", "node_results"]
        return all(key in context for key in required_keys)

    def execute(self, context: dict) -> AgentResult:
        """
        Execute commit workflow changes.

        Args:
            context: Dictionary containing strategy, accumulated_changes, and node_results

        Returns:
            AgentResult with commit SHA in metadata

        Raises:
            ValueError: If input validation fails
        """
        if not self.validate_input(context):
            raise ValueError(
                "Invalid context: strategy, accumulated_changes, and node_results are required"
            )

        strategy = context["strategy"]
        accumulated_changes: list[FileChange] = context["accumulated_changes"]
        node_results: dict = context["node_results"]

        try:
            # If no changes, return success without committing
            if not accumulated_changes:
                return AgentResult(
                    success=True,
                    changes=[],
                    message="No changes to commit",
                    metadata={"commit_sha": ""},
                )

            # Generate meaningful commit message
            commit_message = self._generate_commit_message(
                strategy, node_results, accumulated_changes
            )

            # Commit all changes atomically
            commit_sha = self.vault_service.apply_changes(
                accumulated_changes, commit_message
            )

            return AgentResult(
                success=True,
                changes=[],
                message=f"Committed {len(accumulated_changes)} changes (SHA: {commit_sha[:7]})",
                metadata={"commit_sha": commit_sha},
            )

        except Exception as e:
            return AgentResult(
                success=False,
                changes=[],
                message=f"Failed to commit changes: {str(e)}",
                metadata={"error": str(e)},
            )

    def _generate_commit_message(
        self, strategy: str, node_results: dict, changes: list[FileChange]
    ) -> str:
        """
        Generate commit message from workflow results.

        Args:
            strategy: Workflow strategy name
            node_results: Results from executed nodes
            changes: List of file changes

        Returns:
            Formatted commit message
        """
        summary_parts = []
        for node_name, result in node_results.items():
            if result["success"] and node_name != "commit_changes":
                summary_parts.append(f"- {node_name}: {result['message']}")

        summary = "\n".join(summary_parts) if summary_parts else "Workflow completed"

        # Count operations by type
        creates = sum(1 for c in changes if c.action.value == "create")
        updates = sum(1 for c in changes if c.action.value == "update")
        deletes = sum(1 for c in changes if c.action.value == "delete")

        op_counts = {"created": creates, "updated": updates, "deleted": deletes}
        operations = [f"{count} {op}" for op, count in op_counts.items() if count]

        operations_str = ", ".join(operations) if operations else "no changes"

        return f"""Automated vault improvements via {strategy} strategy

{summary}

Files: {operations_str}

ðŸ¤– Generated by Obsidian Agents Workflow
"""
